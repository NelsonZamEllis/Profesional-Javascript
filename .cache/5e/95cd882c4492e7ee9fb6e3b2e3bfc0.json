{"id":"ejercicios/prototypal-inheritance.html","dependencies":[{"name":"E:\\Programas\\Programacion\\Profesional-de-Javascript\\package.json","includedInParent":true,"mtime":1620631791561}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <h1>\r\n        SomeObject.prototype es un objeto donde definimos el prototipo de las instancias \r\n        de SomeObject. Es decir, las instancias de SomeObject van a \"heredar\" de \r\n        SomeObject.prototype.\r\n    </h1>\r\n    <br>\r\n    <br>\r\n    <h1>\r\n        SomeObject.[[Prototype]] es el prototipo de SomeObject. Es decir, SomeObject \"hereda\"\r\n        de SomeObject.prototipe.\r\n    </h1>\r\n\r\n    <script>function Hero(name) {\n  this.name = name;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`Hola, soy ${this.name}`);\n};\n\nconst zelda = new Hero(\"Zelda\"); // propiedades de la instancia\n\nconsole.log(\"Name:\", zelda.name); // propiedades de la \"clase\"\n\nconsole.log(\"Saludar:\", zelda.saludar); // propiedades heredadas ej: toString\n\nconsole.log(\"toString:\", zelda.toString); // hasOwnProperty (de d√≥nde sale toString o esto?)\n\nconsole.log('zelda.hasOwnProperty(\"name\"):', zelda.hasOwnProperty(\"name\")); // inspeccionemos el prototipo del zelda\n// inspeccionemos el prototipo del Hero\n// Inspeccionemos el prototipo del Object</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"e6a80742d77f07d5e8d3aa4193d4f130","cacheData":{"env":{}}}