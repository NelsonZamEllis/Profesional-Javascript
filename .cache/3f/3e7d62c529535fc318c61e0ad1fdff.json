{"id":"ejercicios/prototype.html","dependencies":[{"name":"E:\\Programas\\Programacion\\Profesional-de-Javascript\\package.json","includedInParent":true,"mtime":1620631791561}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Prototype</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <script>// Un objeto común y corriente\n// const zelda = {\n//     name: \"Zelda\"\n// }\n// zelda.saludar = function () {\n//     console.log(`Hola soy ${this.name}`);\n// }\n// zelda.saludar();\n// const link = {\n//     name: \"Link\"\n// }\n// link.saludar = function () {\n//     console.log(`Hola soy ${this.name}`);\n// }\n// link.saludar();\n// Seamos un poco más eficientes\n// function Hero (name) {\n//     const hero = {\n//         name: name\n//     }\n//     hero.saludar = function () {\n//         console.log(`Hola soy ${this.name}`);\n//     };\n//     return hero\n// }\n// const zelda = Hero(\"Zelda\")\n// zelda.saludar();\n// const link = Hero(\"Link\")\n// link.saludar();\n// Aun podemos mejorar más y evitar tener que crear la misma función cada vez\n// const heroMethods = {\n//     saludar: function () {\n//         console.log(`Me llamo ${this.name}`);\n//     },\n// };\n// function Hero (name) {\n//     const hero = {\n//         name: name,\n//     };\n//     hero.saludar = heroMethods.saludar;\n//     return hero\n// }\n// const zelda = Hero(\"Zelda\")\n// zelda.saludar();\n// const link = Hero(\"Link\")\n// link.saludar();\n//Object.create\n//const nuevoObjeto = Object.create(objeto)\n// const heroMethods = {\n//     saludar: function () {\n//         console.log(`Soy superheroe! ${this.name}`);\n//     },\n// };\n// function Hero (name) {\n//     const hero = Object.create(heroMethods);\n//     hero.name = name;\n//     return hero;\n// }\n// const zelda = Hero(\"Zelda\")\n// zelda.saludar();\n// const link = Hero(\"Link\")\n// link.saludar();\n// Los métodos de hero dentro de Hero\n// const heroMethods = {\n//     saludar: function () {\n//         console.log(`Soy superheroe! ${this.name}`);\n//     },\n// };\n// function Hero (name) {\n//     const hero = Object.create(Hero.prototype);\n//     hero.name = name;\n//     return hero;\n// }\n// Hero.prototype.saludar = function() {\n//     console.log(`Soy superheroina! ${this.name}`);\n// };\n// const zelda = Hero(\"Zelda\");\n// zelda.saludar();\n// const link = Hero(\"Link\");\n// link.saludar();\n// new es un atajo (azucar sintetica) para levar Hero.prototype al objeto\nfunction Hero(name) {\n  // const this = Object.create(Hero.prototype);\n  this.name = name; // return this;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`New: ${this.name}`);\n};\n\nconst zelda = new Hero(\"Zelda\");\nzelda.saludar();\nconst link = new Hero(\"Link\");\nlink.saludar();</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"7dd06103d2058a1ee71fa5dcc5f19f7a","cacheData":{"env":{}}}